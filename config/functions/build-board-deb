# Funcions:
# build_board_deb

## Build board deb package
build_board_deb() {
	local pkgname="${LINUX_BOARD_DEB}"
	local pkgdir="$BUILD_IMAGES/.tmp/${pkgname}_${VERSION}_${DISTRIB_ARCH}"
	rm -rf $pkgdir
	mkdir -p $pkgdir/DEBIAN

	info_msg "Build board deb..."

	cat <<-EOF > $pkgdir/DEBIAN/control
	Package: $pkgname
	Version: $VERSION
	Architecture: $DISTRIB_ARCH
	Maintainer: Khadas <hello@khadas.com>
	Installed-Size: 1
	Replaces: linux-firmware, chromium-browser, chromium, watchdog
	Section: kernel
	Priority: optional
	Depends: bash, linux-base, u-boot-tools, initramfs-tools
	Provides: linux-board-package
	Conflicts: linux-board-package
	Description: Fenix tweaks for ${DISTRIBUTION}-${DISTRIB_RELEASE} on $KHADAS_BOARD
	EOF

	# Set up pre install script
	cat <<-EOF > $pkgdir/DEBIAN/preinst
	#!/bin/sh
	rm -rf /etc/chromium.d/default-flags

	exit 0
	EOF

	chmod 755 $pkgdir/DEBIAN/preinst

	# Set up post remove script
	cat <<-EOF > $pkgdir/DEBIAN/postrm
	#!/bin/sh
	exit 0
	EOF

	chmod 755 $pkgdir/DEBIAN/postrm

	# Set up post install script
	cat <<-EOF > $pkgdir/DEBIAN/postinst
	#!/bin/sh
	exit 0
	EOF

	chmod 755 $pkgdir/DEBIAN/postinst

	# Copy premade common rootfs files
	rsync -a $ROOT/archives/filesystem/common/* $pkgdir/

	# Copy board special rootfs files
	rsync -a $ROOT/archives/filesystem/special/$KHADAS_BOARD/* $pkgdir/

	# Copy boot scripts
	if [ "$INSTALL_TYPE" == "SD-USB" ]; then
		mkdir -p $pkgdir/boot
		cp $BOOT_SCRIPTS/$BOOT_SCRIPT_VENDER $pkgdir/boot
		cp $BOOT_SCRIPTS/$BOOT_SCRIPT_BOARD $pkgdir/boot
		cp $BOOT_SCRIPTS/$BOOT_INI $pkgdir/boot

		$UTILS_DIR/mkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n "$CHIP autoscript" -d $pkgdir/boot/$BOOT_SCRIPT_BOARD $pkgdir/boot/${BOOT_SCRIPT_BOARD%.cmd*}
		$UTILS_DIR/mkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n "$VENDER autoscript" -d $pkgdir/boot/$BOOT_SCRIPT_VENDER $pkgdir/boot/${BOOT_SCRIPT_VENDER%.txt}
		cd $pkgdir/boot
		zip ${BOOT_SCRIPT_VENDER%.txt}.zip ${BOOT_SCRIPT_VENDER%.txt} ${BOOT_SCRIPT_VENDER}
		cd -
	fi

	# Remove fstab for EMMC image
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		rm $pkgdir/etc/fstab
	fi

	# Copy Wi-Fi & BT firmware
	if [ "$WIFI_MODEL" == "Broadcom" ]; then
		# Copy Wi-Fi firmware
		mkdir -p $pkgdir/lib/firmware
		cp -r $ROOT/archives/hwpacks/wlan-firmware/brcm $pkgdir/lib/firmware/

		# Copy Bluetooth firmware
		mkdir -p $pkgdir/usr/local/bin
		mkdir -p $pkgdir/lib/systemd/system
		cp -r $ROOT/archives/hwpacks/bluez/brcm_patchram_plus-$DISTRIB_ARCH $pkgdir/usr/local/bin/brcm_patchram_plus
		cp -r $ROOT/archives/hwpacks/bluez/bluetooth-khadas.service $pkgdir/lib/systemd/system/
		cp -r $ROOT/archives/hwpacks/bluez/bluetooth-khadas.sh $pkgdir/usr/local/bin/

		# FIXME AP6359SA and AP6398S use the same chipid and rev, so can't identify in DHD driver.
		# But AP6359SA only on VIM2, and AP6398S only on Edge, so modify firmware here.
		if [ "$KHADAS_BOARD" == "Edge" ]; then
			## Wi-Fi firmware
			mv $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag_apsta_ap6398s.bin $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag_apsta.bin
			mv $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag_ap6398s.bin $pkgdir/lib/firmware/brcm/fw_bcm4359c0_ag.bin
			mv $pkgdir/lib/firmware/brcm/nvram_ap6398s.txt $pkgdir/lib/firmware/brcm/nvram_ap6359sa.txt

			## Bluetooth firmware
			mv $pkgdir/lib/firmware/brcm/BCM4359C0_ap6398s.hcd $pkgdir/lib/firmware/brcm/BCM4359C0.hcd
		fi
	fi

	# Trigger uInitrd creation after installation, to apply
	# /etc/initramfs/post-update.d/99-uboot
	cat <<-EOF > $pkgdir/DEBIAN/triggers
	activate update-initramfs
	EOF

	# Config file
	cat <<-EOF > $pkgdir/etc/fenix-release
	# PLEASE DO NOT EDIT THIS FILE
	BOARD=$KHADAS_BOARD
	VENDER=$VENDER
	VERSION=$VERSION
	ARCH=$DISTRIB_ARCH
	INITRD_ARCH=${DISTRIB_ARCH/armhf/arm}
	EOF

	mkdir -p $pkgdir/usr/lib/NetworkManager/conf.d/
	cat <<-EOF > $pkgdir/usr/lib/NetworkManager/conf.d/zz-override-wifi-powersave-off.conf
	[connection]
	wifi.powersave = 2
	EOF

	if [ "$DISTRIB_RELEASE" == "stretch" ]; then
		cat <<-EOF > $pkgdir/usr/lib/NetworkManager/conf.d/10-override-random-mac.conf
		[device]
		wifi.scan-rand-mac-address=no
		EOF
	fi

	# Create board deb file
	echo "Building package: $pkgname"
	fakeroot dpkg-deb -b $pkgdir ${pkgdir}.deb
	mkdir -p $BUILD_DEBS
	cp ${pkgdir}.deb $BUILD_DEBS
	# Cleanup
	rm -rf ${pkgdir}.deb
	rm -rf $pkgdir
}
