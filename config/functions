## Print error message
## $1 - message
error_msg() {
	local _FILE=${BASH_SOURCE[1]}
	local _LINE=${BASH_LINENO[0]}

	echo -e "$_FILE:$_LINE" $ERROR "$1"
}

## Print warning message
## $1 - message
warning_msg() {
	local _FILE=${BASH_SOURCE[1]}
	local _LINE=${BASH_LINENO[0]}

    echo -e "$_FILE:$_LINE" $WARNING "$1"
}

## Calculate time
## $1 - time in seconds
time_cal() {
    local days hours minutes seconds temp

    second=$(($1 % 60))
    minute=$(($1 / 60))
    temp=$minute
    minute=$(($temp % 60))
    hour=$(($temp / 60))
    temp=$hour
    hour=$(($temp % 24))
    day=$(($temp / 24))

    echo "Time elapsed: $day days $hour hours $minute minutes $second seconds."
}

## Umount
do_umount() {
    if mount | grep $1 > /dev/null; then
        sudo umount $1
    fi
}

## Cleanup
cleanup() {
    cd $UBUNTU_WORKING_DIR
    echo "Cleanup..."
    sync

    if mount | grep $ROOTFS > /dev/null; then
        do_umount "$ROOTFS/dev/pts"
        do_umount "$ROOTFS/dev"
        do_umount "$ROOTFS/proc"
        do_umount "$ROOTFS/sys/kernel/security"
        do_umount "$ROOTFS/sys"
        do_umount "$ROOTFS"
    fi

    if [ "$INSTALL_TYPE" == "SD-USB" ]; then
        if mount | grep $BOOT > /dev/null; then
            do_umount "$BOOT"
            sudo losetup -d "${IMAGE_LOOP_DEV}"
        fi
    fi
}

# Arguments:
#   $1 - kernel version
#   $2 - kernel image file
#   $3 - kernel map file
#   $4 - default install path (blank if root directory)
install_kernel() {
    if [ "$(basename $2)" = "Image.gz" ]; then
        # Compressed install
        echo "Installing compressed kernel"
        base=vmlinuz
    else
        # Normal install
        echo "Installing normal kernel"
        base=vmlinux
    fi

    if [ -f $4/$base-$1 ]; then
        sudo mv $4/$base-$1 $4/$base-$1.old
    fi
    sudo cp $2 $4/$base-$1

    # Install system map file
    if [ -f $4/System.map-$1 ]; then
        sudo mv $4/System.map-$1 $4/System.map-$1.old
    fi
    sudo cp $3 $4/System.map-$1

    # Install config file
    config=$(dirname "$3")
    config="${config}/.config"
    if [ -f $4/config-$1 ]; then
        sudo mv $4/config-$1 $4/config-$1.old
    fi
    sudo cp $config $4/config-$1
}

## Select linux dtb
prepare_linux_dtb() {
    ret=0
    case "$KHADAS_BOARD" in
        VIM)
            if [ "$LINUX" == "mainline" ]; then
                LINUX_DTB="arch/arm64/boot/dts/amlogic/meson-gxl-s905x-khadas-vim.dtb"
            elif [ "$LINUX" == "3.14" ]; then
                LINUX_DTB="arch/arm64/boot/dts/kvim_linux.dtb"
            elif [ "$LINUX" == "4.9" ]; then
				LINUX_DTB="arch/arm64/boot/dts/amlogic/kvim_linux.dtb"
			fi
            ;;
        VIM2)
			if [ "$LINUX" == "mainline" ]; then
				LINUX_DTB="arch/arm64/boot/dts/amlogic/meson-gxm-khadas-vim2.dts"
			elif [ "$LINUX" == "3.14" ]; then
				LINUX_DTB="arch/arm64/boot/dts/kvim2_linux.dtb"
			elif [ "$LINUX" == "4.9" ]; then
				LINUX_DTB="arch/arm64/boot/dts/amlogic/kvim2_linux.dtb"
			fi
            ;;
        *)
            error_msg "Unsupported board:$KHADAS_BOARD"
            LINUX_DTB=
            ret=-1
            ;;
    esac

    return $ret
}

## Prepare linux directory
prepare_linux_dir() {
    if [ "$LINUX" == "mainline" ]; then
        LINUX_DIR="$BUILD/linux-mainline-*"
    else
        LINUX_DIR="$UBUNTU_WORKING_DIR/linux"
    fi
}

## Select uboot configuration
prepare_uboot_configuration() {
    ret=0
    case "$KHADAS_BOARD" in
        VIM)
            UBOOT_DEFCONFIG="kvim_defconfig"
            ;;
        VIM2)
            UBOOT_DEFCONFIG="kvim2_defconfig"
            ;;
        *)
            error_msg "Unsupported board:$KHADAS_BOARD"
            UBOOT_DEFCONFIG=
            ret=-1
    esac

    return $ret
}

prepare_git_branch() {
    ret=0
    case "$KHADAS_BOARD" in
        VIM)
            UBOOT_GIT_BRANCH="khadas-vim-v2015.01"
            ;;
        VIM2)
            UBOOT_GIT_BRANCH="khadas-vim-v2015.01"
            ;;
        *)
            error_msg "Unsupported board:$KHADAS_BOARD"
            UBOOT_GIT_BRANCH=
            ret=-1
            ;;
    esac

    case "$LINUX" in
        3.14)
			if [ "$KHADAS_BOARD" == "VIM" ] || [ "$KHADAS_BOARD" == "VIM2" ]; then
				LINUX_GIT_BRANCH="khadas-vim-3.14.y"
			fi
            ;;
        4.9)
			if [ "$KHADAS_BOARD" == "VIM" ] || [ "$KHADAS_BOARD" == "VIM2" ]; then
				LINUX_GIT_BRANCH="khadas-vim-4.9.y"
			fi
            ;;
    mainline)
            LINUX_GIT_BRANCH="master"
            ;;
        *)
            error_msg "Unsupported linux version:$LINUX"
            LINUX_GIT_BRANCH=
            ret=-1
    esac

    return $ret
}

## Fixup upgrade dtb link
fixup_dtb_link() {
    ret=0
    cd $UPGRADE_DIR
    rm -rf kvim.dtb

    case "$LINUX" in
        4.9|3.14)
            ln -s ../../linux/$LINUX_DTB kvim.dtb
            ;;
    mainline)
            ;;
        *)
            error_msg "Unsupported linux version:$LINUX"
            ret=-1
    esac

    cd -

    return $ret
}

## Prepare amlogic usb updete tool configuration
prepare_aml_update_tool_config() {
    ret=0
    case "$KHADAS_BOARD" in
        VIM)
            AML_UPDATE_TOOL_CONFIG="package.conf"
            ;;
        VIM2)
            AML_UPDATE_TOOL_CONFIG="package.conf"
            ;;
        *)
            error_msg "Unsupported board:$KHADAS_BOARD"
            AML_UPDATE_TOOL_CONFIG=
            ret=-1
            ;;
    esac

    return $ret
}

## Pack the images
pack_update_image() {
    cd ${UBUNTU_WORKING_DIR}

    echo "Image install type: $INSTALL_TYPE"
    if [ "$INSTALL_TYPE" == "EMMC" ]; then
        if [ $AML_UPDATE_TOOL_CONFIG == "" ]; then
            error_msg "'AML_UPDATE_TOOL_CONFIG' is empty!"
            return -1
        fi
        echo "Packing update image using config: $AML_UPDATE_TOOL_CONFIG"
        $UTILS_DIR/aml_image_v2_packer -r $UPGRADE_DIR/$AML_UPDATE_TOOL_CONFIG $UPGRADE_DIR $BUILD_IMAGES/${IMAGE_FILE_NAME}
    elif [ "$INSTALL_TYPE" == "SD-USB" ]; then

        IMAGE_LOOP_DEV="$(sudo losetup --show -f ${BUILD_IMAGES}/${IMAGE_FILE_NAME})"
        sudo partprobe "${IMAGE_LOOP_DEV}"

        if [ "$UBOOT" == "mainline" ]; then
            UBOOT_SD_BIN="$BUILD_IMAGES/u-boot-mainline/u-boot.bin.sd.bin"
        elif [ "$UBOOT" == "2015.01" ]; then
            UBOOT_SD_BIN="u-boot/fip/u-boot.bin.sd.bin"
        fi

        sudo dd if=$UBOOT_SD_BIN of="${IMAGE_LOOP_DEV}" conv=fsync bs=1 count=442
        sudo dd if=$UBOOT_SD_BIN of="${IMAGE_LOOP_DEV}" conv=fsync bs=512 skip=1 seek=1

        sudo losetup -d "${IMAGE_LOOP_DEV}"
    else
        error_msg "Unsupported install type: '$INSTALL_TYPE'"
        return -1
    fi

    echo -e "\nIMAGE: $BUILD_IMAGES/$IMAGE_FILE_NAME"
}
