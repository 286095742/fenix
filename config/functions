## Print error message
## $1 - message
error_msg() {
	local _FILE=${BASH_SOURCE[1]}
	local _LINE=${BASH_LINENO[0]}

	echo -e "$_FILE:$_LINE" $ERROR "$1"
}

## Print warning message
## $1 - message
warning_msg() {
	local _FILE=${BASH_SOURCE[1]}
	local _LINE=${BASH_LINENO[0]}

    echo -e "$_FILE:$_LINE" $WARNING "$1"
}

## Calculate time
## $1 - time in seconds
time_cal() {
	local minutes

	minutes=$(($1 / 60))

	echo "Time elapsed: $minutes minute(s)."
}

## Prepare host
## Install essential packages
prepare_host() {
	local hostdeps="git build-essential libncurses5-dev libssl-dev wget qemu qemu-user-static binfmt-support \
					lib32stdc++6 libstdc++6 libnewlib-arm-none-eabi python liblz4-tool libpython2.7-dev bc linux-base \
					ca-certificates device-tree-compiler acl locales ncurses-base udev distcc \
					libc6-i386 lib32ncurses5 lib32tinfo5 pv binfmt-support ccache debootstrap ntpdate uuid-dev zlib1g-dev \
					unzip libusb-1.0-0-dev fakeroot parted pkg-config libncurses5-dev whiptail debian-keyring debian-archive-keyring \
					f2fs-tools libfile-fcntllock-perl rsync btrfs-tools ncurses-term p7zip-full kmod dosfstools libc6-dev-armhf-cross \
					curl patchutils"

	local deps=()
	local installed=$(dpkg-query -W -f '${db:Status-Abbrev}|${binary:Package}\n' '*' 2>/dev/null | grep '^ii' | awk -F '|' '{print $2}' | cut -d ':' -f 1)

	for packet in $hostdeps; do
		if ! grep -q -x -e "$packet" <<< "$installed"; then deps+=("$packet"); fi
	done

	if [[ ${#deps[@]} -gt 0 ]]; then
		echo "Installing build dependencies"
		sudo apt update
		sudo apt -y --no-install-recommends install "${deps[@]}"
		sudo update-ccache-symlinks
	fi
}

## Umount
do_umount() {
	if mount | grep $1 > /dev/null; then
		sudo umount $1
    fi
}

## Cleanup
cleanup() {
    cd $UBUNTU_WORKING_DIR
    echo "Cleanup..."
    sync

    if mount | grep $ROOTFS > /dev/null; then
        do_umount "$ROOTFS/dev/pts"
        do_umount "$ROOTFS/dev"
        do_umount "$ROOTFS/proc"
        do_umount "$ROOTFS/sys/kernel/security"
        do_umount "$ROOTFS/sys"
		if [ "$INSTALL_TYPE" == "SD-USB" ]; then
			if mount | grep "$ROOTFS/boot" > /dev/null; then
				do_umount "$ROOTFS/boot"
				sudo losetup -d "${IMAGE_LOOP_DEV}"
			fi
		fi

		do_umount "$ROOTFS"
	fi
}

## Prepare toolhains
prepare_toolchains() {

    build_package "gcc-linaro-aarch64-linux-gnu:host"
    build_package "gcc-linaro-aarch64-none-elf:host"
    build_package "gcc-linaro-arm-none-eabi:host"
    if [ "$UBOOT" == "mainline" ]; then
        build_package "gcc-linaro-aarch64-elf:host"
    fi

    return 0
}

## Prepare packages
prepare_packages() {
    if [ "$UBOOT" == "mainline" ]; then
        build_package "u-boot-mainline:target"
    fi

    if [ "$LINUX" == "mainline" ]; then
        build_package "linux-mainline:target"
    fi

    build_package "utils:host"
    build_package "images_upgrade:host"
}

# Arguments:
#   $1 - kernel version
#   $2 - kernel image file
#   $3 - kernel map file
#   $4 - default install path (blank if root directory)
install_kernel() {
    if [ "$(basename $2)" = "Image.gz" ]; then
        # Compressed install
        echo "Installing compressed kernel"
        base=vmlinuz
    else
        # Normal install
        echo "Installing normal kernel"
        base=vmlinux
    fi

    if [ -f $4/$base-$1 ]; then
        sudo mv $4/$base-$1 $4/$base-$1.old
    fi
    sudo cp $2 $4/$base-$1

    # Install system map file
    if [ -f $4/System.map-$1 ]; then
        sudo mv $4/System.map-$1 $4/System.map-$1.old
    fi
    sudo cp $3 $4/System.map-$1

    # Install config file
    config=$(dirname "$3")
    config="${config}/.config"
    if [ -f $4/config-$1 ]; then
        sudo mv $4/config-$1 $4/config-$1.old
    fi
    sudo cp $config $4/config-$1
}

## Select linux dtb
prepare_linux_dtb() {
    ret=0
    case "$KHADAS_BOARD" in
        VIM)
            if [ "$LINUX" == "mainline" ]; then
                LINUX_DTB="arch/arm64/boot/dts/amlogic/meson-gxl-s905x-khadas-vim.dtb"
            elif [ "$LINUX" == "3.14" ]; then
                LINUX_DTB="arch/arm64/boot/dts/kvim_linux.dtb"
            elif [ "$LINUX" == "4.9" ]; then
				LINUX_DTB="arch/arm64/boot/dts/amlogic/kvim_linux.dtb"
			fi
            ;;
        VIM2)
			if [ "$LINUX" == "mainline" ]; then
				LINUX_DTB="arch/arm64/boot/dts/amlogic/meson-gxm-khadas-vim2.dts"
			elif [ "$LINUX" == "3.14" ]; then
				LINUX_DTB="arch/arm64/boot/dts/kvim2_linux.dtb"
			elif [ "$LINUX" == "4.9" ]; then
				LINUX_DTB="arch/arm64/boot/dts/amlogic/kvim2_linux.dtb"
			fi
            ;;
        *)
            error_msg "Unsupported board:$KHADAS_BOARD"
            LINUX_DTB=
            ret=-1
            ;;
    esac

    return $ret
}

## Prepare linux directory
prepare_linux_dir() {
    if [ "$LINUX" == "mainline" ]; then
        LINUX_DIR="$BUILD/linux-mainline-*"
    else
        LINUX_DIR="$UBUNTU_WORKING_DIR/linux"
    fi
}

## Select uboot configuration
prepare_uboot_configuration() {
    ret=0
    case "$KHADAS_BOARD" in
        VIM)
            UBOOT_DEFCONFIG="kvim_defconfig"
            ;;
        VIM2)
            UBOOT_DEFCONFIG="kvim2_defconfig"
            ;;
        *)
            error_msg "Unsupported board:$KHADAS_BOARD"
            UBOOT_DEFCONFIG=
            ret=-1
    esac

    return $ret
}

prepare_git_branch() {
    ret=0
    case "$KHADAS_BOARD" in
        VIM)
            UBOOT_GIT_BRANCH="khadas-vim-v2015.01"
            ;;
        VIM2)
            UBOOT_GIT_BRANCH="khadas-vim-v2015.01"
            ;;
        *)
            error_msg "Unsupported board:$KHADAS_BOARD"
            UBOOT_GIT_BRANCH=
            ret=-1
            ;;
    esac

    case "$LINUX" in
        3.14)
			if [ "$KHADAS_BOARD" == "VIM" ] || [ "$KHADAS_BOARD" == "VIM2" ]; then
				LINUX_GIT_BRANCH="khadas-vim-3.14.y"
			fi
            ;;
        4.9)
			if [ "$KHADAS_BOARD" == "VIM" ] || [ "$KHADAS_BOARD" == "VIM2" ]; then
				LINUX_GIT_BRANCH="khadas-vim-4.9.y"
			fi
            ;;
    mainline)
            LINUX_GIT_BRANCH="master"
            ;;
        *)
            error_msg "Unsupported linux version:$LINUX"
            LINUX_GIT_BRANCH=
            ret=-1
    esac

    return $ret
}

## Fixup upgrade dtb link
fixup_dtb_link() {
    ret=0
    cd $UPGRADE_DIR
    rm -rf kvim.dtb

    case "$LINUX" in
        4.9|3.14)
            ln -s ../../linux/$LINUX_DTB kvim.dtb
            ;;
    mainline)
            ;;
        *)
            error_msg "Unsupported linux version:$LINUX"
            ret=-1
    esac

    cd -

    return $ret
}

## Prepare amlogic usb updete tool configuration
prepare_aml_update_tool_config() {
    ret=0
    case "$KHADAS_BOARD" in
        VIM)
            AML_UPDATE_TOOL_CONFIG="package.conf"
            ;;
        VIM2)
            AML_UPDATE_TOOL_CONFIG="package.conf"
            ;;
        *)
            error_msg "Unsupported board:$KHADAS_BOARD"
            AML_UPDATE_TOOL_CONFIG=
            ret=-1
            ;;
    esac

    return $ret
}

## Pack the images
pack_update_image() {
    cd ${UBUNTU_WORKING_DIR}

    echo "Image install type: $INSTALL_TYPE"
    if [ "$INSTALL_TYPE" == "EMMC" ]; then
        if [ $AML_UPDATE_TOOL_CONFIG == "" ]; then
            error_msg "'AML_UPDATE_TOOL_CONFIG' is empty!"
            return -1
        fi
        echo "Packing update image using config: $AML_UPDATE_TOOL_CONFIG"
        $UTILS_DIR/aml_image_v2_packer -r $UPGRADE_DIR/$AML_UPDATE_TOOL_CONFIG $UPGRADE_DIR $BUILD_IMAGES/${IMAGE_FILE_NAME}
    elif [ "$INSTALL_TYPE" == "SD-USB" ]; then

        IMAGE_LOOP_DEV="$(sudo losetup --show -f ${BUILD_IMAGES}/${IMAGE_FILE_NAME})"
        sudo partprobe "${IMAGE_LOOP_DEV}"

        if [ "$UBOOT" == "mainline" ]; then
            UBOOT_SD_BIN="$BUILD_IMAGES/u-boot-mainline/u-boot.bin.sd.bin"
        elif [ "$UBOOT" == "2015.01" ]; then
            UBOOT_SD_BIN="u-boot/fip/u-boot.bin.sd.bin"
        fi

        sudo dd if=$UBOOT_SD_BIN of="${IMAGE_LOOP_DEV}" conv=fsync bs=1 count=442
        sudo dd if=$UBOOT_SD_BIN of="${IMAGE_LOOP_DEV}" conv=fsync bs=512 skip=1 seek=1

        sudo losetup -d "${IMAGE_LOOP_DEV}"
    else
        error_msg "Unsupported install type: '$INSTALL_TYPE'"
        return -1
    fi

    echo -e "\nIMAGE: $BUILD_IMAGES/$IMAGE_FILE_NAME"
}

## Create board deb package
create_board_package() {
	local pkgname="linux-board-package-$(echo ${VENDER}-${CHIP} | tr '[A-Z]' '[a-z]')"
	local DEST="$BUILD_IMAGES/.tmp/${pkgname}_${VERSION}_${UBUNTU_ARCH}"
	rm -rf $DEST
	mkdir -p $DEST/DEBIAN

	cat <<-EOF > $DEST/DEBIAN/control
	Package: $pkgname
	Version: $VERSION
	Architecture: $UBUNTU_ARCH
	Maintainer: Khadas <hello@khadas.com>
	Installed-Size: 1
	Section: kernel
	Priority: optional
	Depends: bash, linux-base, u-boot-tools, initramfs-tools
	Provides: linux-board-package
	Conflicts: linux-board-package
	Description: Fenix tweaks for Ubuntu-$UBUNTU on $KHADAS_BOARD
	EOF

	# Set up pre install script
	cat <<-EOF > $DEST/DEBIAN/preinst
	#!/bin/sh
	exit 0
	EOF

	chmod 755 $DEST/DEBIAN/preinst

	# Set up post remove script
	cat <<-EOF > $DEST/DEBIAN/postrm
	#!/bin/sh
	exit 0
	EOF

	chmod 755 $DEST/DEBIAN/postrm

	# Set up post install script
	cat <<-EOF > $DEST/DEBIAN/postinst
	#!/bin/sh
	exit 0
	EOF

	chmod 755 $DEST/DEBIAN/postinst

	# Copy premade rootfs files
	rsync -a $UBUNTU_WORKING_DIR/archives/filesystem/* $DEST/

	if [ "$INSTALL_TYPE" == "SD-USB" ]; then
		# Universal multi-boot
		if [ "$LINUX" == "mainline" ]; then
			$UTILS_DIR/mkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n "S905 autoscript" -d $DEST/boot/s905_autoscript.cmd.mainline $DEST/boot/s905_autoscript
		else
			$UTILS_DIR/mkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n "S905 autoscript" -d $DEST/boot/s905_autoscript.cmd $DEST/boot/s905_autoscript
		fi
		$UTILS_DIR/mkimage -A arm64 -O linux -T script -C none -a 0 -e 0 -n "AML autoscript" -d $DEST/boot/aml_autoscript.txt $DEST/boot/aml_autoscript
		cd $DEST/boot
		zip aml_autoscript.zip aml_autoscript aml_autoscript.txt
		cd -
	fi

	# Remove fstab for EMMC image
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		rm $DEST/etc/fstab
	fi

	# Copy Wi-Fi firmware
	mkdir -p $DEST/lib/firmware
	cp -r $UBUNTU_WORKING_DIR/archives/hwpacks/wlan-firmware/brcm $DEST/lib/firmware/

	# Copy Bluetooth firmware
	mkdir -p $DEST/usr/local/bin
	mkdir -p $DEST/lib/systemd/system
	cp -r $UBUNTU_WORKING_DIR/archives/hwpacks/bluez/brcm_patchram_plus-$UBUNTU_ARCH $DEST/usr/local/bin/brcm_patchram_plus
	cp -r $UBUNTU_WORKING_DIR/archives/hwpacks/bluez/bluetooth-khadas.service $DEST/lib/systemd/system/
	cp -r $UBUNTU_WORKING_DIR/archives/hwpacks/bluez/bluetooth-khadas.sh $DEST/usr/local/bin/

	# Trigger uInitrd creation after installation, to apply
	# /etc/initramfs/post-update.d/99-uboot
	cat <<-EOF > $DEST/DEBIAN/triggers
	activate update-initramfs
	EOF

	# Config file
	cat <<-EOF > $DEST/etc/fenix-release
	# PLEASE DO NOT EDIT THIS FILE
	BOARD=$KHADAS_BOARD
	VENDER=$VENDER
	VERSION=$VERSION
	ARCH=$UBUNTU_ARCH
	INITRD_ARCH=$UBUNTU_ARCH
	EOF

	# Create board deb file
	echo "Building package: $pkgname"
	fakeroot dpkg-deb -b $DEST ${DEST}.deb
	sudo mv ${DEST}.deb $ROOTFS
	# Cleanup
	rm -rf $DEST
}
