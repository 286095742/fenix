# Khadas Edge Rockchip RK3399
SUPPORTED_UBOOT=("2017.09")
SUPPORTED_LINUX=("4.4")

UBOOT_DEFCONFIG="kedge_defconfig"
UBOOT_GIT_BRANCH="khadas-edge-v2017.09"
UBOOT_COMPILER="aarch64-linux-gnu-"
UBOOT_COMPILER_PATH="$TOOLCHAINS/gcc-linaro-aarch64-linux-gnu/bin"
KERNEL_COMPILER="aarch64-linux-gnu-"
KERNEL_COMPILER_PATH="$TOOLCHAINS/gcc-linaro-aarch64-linux-gnu/bin"

case "$LINUX" in
	4.4)
		LINUX_DTB="arch/arm64/boot/dts/rockchip/rk3399-kedge-linux.dtb"
		LINUX_DIR="$ROOT/linux"
		LINUX_GIT_BRANCH="khadas-edge-4.4.y"
		LINUX_DEFCONFIG="kedge_defconfig"
		SERIALCON="ttyFIQ0"
		BOOT_SCRIPT_BOARD="rk3399_autoscript.cmd"
		GPU_VER="r14p0"
		if [ "$DISTRIB_TYPE" != "server" ]; then
			GPU_PLATFORM="x11"
		else
			GPU_PLATFORM="gbm"
		fi
		;;
esac

case "$UBOOT" in
	2017.09)
		UBOOT_DIR="$ROOT/u-boot"
		;;
	mainline)
		UBOOT_DIR="$BUILD/u-boot-mainline-*"
esac

BOOT_SCRIPT_VENDER="rockchip_autoscript.txt"
BOOT_INI="rockchip_boot.ini"

####
WIFI_MODEL="Broadcom"
GPU_MODEL="ARM-Mali-T860"

##############################
uboot_custom_postprocess() {
	cd $UBOOT_DIR

	# Cleanup old binaries
	rm -rf uboot.img trust.img MiniLoaderAll.bin

	UBOOT_LOAD_ADDR=`sed -n "/CONFIG_SYS_TEXT_BASE=/s/CONFIG_SYS_TEXT_BASE=//p" include/autoconf.mk|tr -d '\r'`
	echo "UBOOT_LOAD_ADDR: $UBOOT_LOAD_ADDR"
	$BUILD/rkbin-*/tools/loaderimage --pack --uboot ./u-boot.bin uboot.img ${UBOOT_LOAD_ADDR}
	rm u-boot.img u-boot-dtb.img
	info_msg "pack uboot okay! Input: $UBOOT_DIR/u-boot.bin"

	tools/mkimage -n rk3399 -T rksd -d $BUILD/rkbin-*/bin/rk33/rk3399_ddr_800MHz_v1.12.bin idbloader.img
	cat $BUILD/rkbin-*/bin/rk33/rk3399_miniloader_v1.12.bin >> idbloader.img
	info_msg "pack idbloader.img okay!"

	cd $BUILD/rkbin-*
	$BUILD/rkbin-*/tools/boot_merger --replace tools/rk_tools/ ./ $BUILD/rkbin-*/RKBOOT/RK3399MINIALL.ini
	cd -
	mv $BUILD/rkbin-*/*_loader_*.bin ./MiniLoaderAll.bin
	info_msg "pack loader okay! Input: $BUILD/rkbin-*/RKBOOT/RK3399MINIALL.ini"

	cd $BUILD/rkbin-*
	$BUILD/rkbin-*/tools/trust_merger --replace tools/rk_tools/ ./ $BUILD/rkbin-*/RKTRUST/RK3399TRUST.ini
	cd -
	mv $BUILD/rkbin-*/trust.img ./trust.img
	info_msg "pack trust okay! Input: $BUILD/rkbin-*/RKTRUST/RK3399TRUST.ini"

	cd $ROOT
}

## Pack image
pack_image_platform() {
    cd ${ROOT}

    echo "Image install type: $INSTALL_TYPE"
    if [ "$INSTALL_TYPE" == "EMMC" ]; then

		LOADER1_SIZE=8000
		RESERVED1_SIZE=128
		RESERVED2_SIZE=8192
		LOADER2_SIZE=8192
		ATF_SIZE=8192
		BOOT_SIZE=229376

		SYSTEM_START=0
		LOADER1_START=64
		RESERVED1_START=$(expr ${LOADER1_START} + ${LOADER1_SIZE})
		RESERVED2_START=$(expr ${RESERVED1_START} + ${RESERVED1_SIZE})
		LOADER2_START=$(expr ${RESERVED2_START} + ${RESERVED2_SIZE})
		ATF_START=$(expr ${LOADER2_START} + ${LOADER2_SIZE})
		BOOT_START=$(expr ${ATF_START} + ${ATF_SIZE})
		ROOTFS_START=$(expr ${BOOT_START} + ${BOOT_SIZE})

		IMG_ROOTFS_SIZE=$(stat -L --format="%s" ${BUILD_IMAGES}/rootfs.img)
		GPTIMG_MIN_SIZE=$(expr $IMG_ROOTFS_SIZE + \( ${LOADER1_SIZE} + ${RESERVED1_SIZE} + ${RESERVED2_SIZE} + ${LOADER2_SIZE} + ${ATF_SIZE} + ${BOOT_SIZE} + 35 \) \* 512)
		GPT_IMAGE_SIZE=$(expr $GPTIMG_MIN_SIZE \/ 1024 \/ 1024 + 2)

		dd if=/dev/zero of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} bs=1M count=0 seek=$GPT_IMAGE_SIZE

		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} mklabel gpt
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart loader1 ${LOADER1_START} $(expr ${RESERVED1_START} - 1)
		# parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart reserved1 ${RESERVED1_START} $(expr ${RESERVED2_START} - 1)
		# parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart reserved2 ${RESERVED2_START} $(expr ${LOADER2_START} - 1)
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart loader2 ${LOADER2_START} $(expr ${ATF_START} - 1)
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart trust ${ATF_START} $(expr ${BOOT_START} - 1)
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart boot ${BOOT_START} $(expr ${ROOTFS_START} - 1)
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} set 4 boot on
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} -- unit s mkpart rootfs ${ROOTFS_START} -34s
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} set 5 boot on

		ROOT_UUID="B921B045-1DF0-41C3-AF44-4C6F280D3FAE"

		gdisk ${BUILD_IMAGES}/${IMAGE_FILE_NAME} <<-EOF
		x
		c
		5
		${ROOT_UUID}
		w
		y
		EOF

		# burn u-boot
		dd if=${UBOOT_DIR}/idbloader.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${LOADER1_START} conv=notrunc

		dd if=${UBOOT_DIR}/uboot.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${LOADER2_START} conv=notrunc
		dd if=${UBOOT_DIR}/trust.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${ATF_START} conv=notrunc

		# burn rootfs image
		info_msg "Burning rootfs image..."
		dd if=${BUILD_IMAGES}/rootfs.img bs=1M status=none | pv -p -b -r -s $IMG_ROOTFS_SIZE | dd status=none  conv=notrunc,fsync seek=${ROOTFS_START} of=${BUILD_IMAGES}/${IMAGE_FILE_NAME}

		info_msg "Sync..."
		sync

	elif [ "$INSTALL_TYPE" == "SD-USB" ]; then

        IMAGE_LOOP_DEV="$(losetup --show -f ${BUILD_IMAGES}/${IMAGE_FILE_NAME})"
        partprobe "${IMAGE_LOOP_DEV}"

		dd if=$UBOOT_SD_IMAGE of=${IMAGE_LOOP_DEV} conv=fsync bs=1 count=442
		dd if=$UBOOT_SD_IMAGE of=${IMAGE_LOOP_DEV} conv=fsync bs=512 skip=1 seek=1

        losetup -d "${IMAGE_LOOP_DEV}"
    else
        error_msg "Unsupported install type: '$INSTALL_TYPE'"
        return -1
    fi

	echo ""
    info_msg "IMAGE: $BUILD_IMAGES/$IMAGE_FILE_NAME"
}

## tweaks for platform
tweaks_platform() {
	echo "#Serial console allow root" >> $ROOTFS_TEMP/etc/securetty
	echo "ttyFIQ0" >> $ROOTFS_TEMP/etc/securetty

	# Enable services
	eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "systemctl --no-reload enable bluetooth-khadas.service"'

	# Creak boot links
	if [ "$INSTALL_TYPE" == "EMMC" ]; then
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/zImage zImage"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/uInitrd uInitrd"'
		eval 'LC_ALL=C LANG=C chroot $ROOTFS_TEMP /bin/bash -c "ln -fs /boot/dtb/rk3399-kedge-linux.dtb dtb.img"'
	fi
}

# Build deb packages for platform
build_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" != "server" ]; then
		info_msg "Building xserver..."
		# FIXME
		# remove build stamp to force build for other arch
		if [ ! -d $BUILD_DEBS/xserver ]; then
			rm -rf $BUILD/.stamps/xserver_rk3399
		fi
		build_package "xserver_rk3399:target"

		if [ "$DISTRIB_RELEASE" == "stretch" ]; then
			info_msg "Building mpp..."
			# FIXME
			# remove build stamp to force build for other arch
			if [ ! -d BUILD_DEBS/mpp ]; then
				rm -rf $BUILD/.stamps/mpp_rk3399
			fi
			build_package "mpp_rk3399:target"

			info_msg "Building gstreamer..."
			# FIXME
			# remove build stamp to force build for other arch
			if [ ! -d BUILD_DEBS/gstreamer ]; then
				rm -rf $BUILD/.stamps/gstreamer_rk3399
			fi
			build_package "gstreamer_rk3399:target"

			info_msg "Building qt..."
			# FIXME
			# remove build stamp to force build for other arch
			if [ ! -d BUILD_DEBS/qt ]; then
				rm -rf $BUILD/.stamps/qt_rk3399
			fi
			build_package "qt_rk3399:target"
		fi
	fi

	info_msg "Building libdrm..."
	# FIXME
	# remove build stamp to force build for other arch
	if [ ! -d BUILD_DEBS/libdrm ]; then
		rm -rf $BUILD/.stamps/libdrm_rk3399
	fi
	build_package "libdrm_rk3399:target"
}

# Install deb packages for platform
install_deb_packages_platform() {

	if [ "$DISTRIB_TYPE" != "server" ]; then

		cd $ROOT

		# Install xserver in chroot
		info_msg "Installing xserver..."
		install_deb_chroot $BUILD_DEBS/xserver/xserver-common_*.deb
		install_deb_chroot $BUILD_DEBS/xserver/xserver-xephyr_*.deb
		install_deb_chroot $BUILD_DEBS/xserver/xserver-xorg-core_*.deb
		install_deb_chroot $BUILD_DEBS/xserver/xserver-xorg-dev_*.deb

		if [ "$DISTRIB_RELEASE" == "stretch" ]; then

			# Install mpp in chroot
			info_msg "Installing mpp..."
			install_deb_chroot $BUILD_DEBS/mpp/librockchip-mpp1_*.deb
			install_deb_chroot $BUILD_DEBS/mpp/librockchip-mpp-dev_*.deb
			install_deb_chroot $BUILD_DEBS/mpp/librockchip-vpu0_*.deb

			# Install gstreamer in chroot
			info_msg "Installing gstreamer..."
			debs=$(ls $BUILD_DEBS/gstreamer/*.deb)
			for deb in $debs
			do
				install_deb_chroot $BUILD_DEBS/gstreamer/$(basename $deb)
			done

			# Install qt in chroot
			info_msg "Installing qt..."
			debs=$(ls $BUILD_DEBS/qt/*.deb)
			for deb in $debs
			do
				install_deb_chroot $BUILD_DEBS/qt/$(basename $deb)
			done
		fi
	fi

	cd $ROOT

	# Install libdrm in chroot
	info_msg "Installing libdrm..."
	install_deb_chroot $BUILD_DEBS/libdrm/libdrm2_*.deb
	install_deb_chroot $BUILD_DEBS/libdrm/libdrm2-dbg_*.deb
	install_deb_chroot $BUILD_DEBS/libdrm/libdrm-rockchip1_*.deb
	install_deb_chroot $BUILD_DEBS/libdrm/libdrm-rockchip1-dbgsym_*.deb
	install_deb_chroot $BUILD_DEBS/libdrm/libdrm-dev_*.deb
}
