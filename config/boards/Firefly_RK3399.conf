UBOOT_DEFCONFIG="firefly-rk3399_defconfig"
UBOOT_GIT_BRANCH="firefly-rk3399-v2017.09"

case "$LINUX" in
	4.4)
		LINUX_DTB="arch/arm64/boot/dts/rockchip/rk3399-firefly-linux.dtb"
		LINUX_DIR="$ROOT/linux"
		LINUX_GIT_BRANCH="firefly-rk3399-4.4.y"
		LINUX_DEFCONFIG="firefly_linux_defconfig"
		BOOT_SCRIPT_BOARD="rk3399_autoscript.cmd"
		GPU_VER="r5p1"
		GPU_PLATFORM="x11"
		;;
esac

case "$UBOOT" in
	2017.09)
		UBOOT_DIR="$ROOT/u-boot"
		;;
	mainline)
		UBOOT_DIR="$BUILD/u-boot-mainline-*"
esac

BOOT_SCRIPT_VENDER="rockchip_autoscript.txt"
BOOT_INI="rockchip_boot.ini"

####
WIFI_MODEL="Broadcom"
GPU_MODEL="ARM-Mali-T860"

##############################
uboot_custom_postprocess() {
	cd $UBOOT_DIR

	$BUILD/rkbin-*/tools/loaderimage --pack --uboot ./u-boot-dtb.bin uboot.img 0x200000
	tools/mkimage -n rk3399 -T rksd -d $BUILD/rkbin-*/rk33/rk3399_ddr_800MHz_v1.08.bin idbloader.img
	cat $BUILD/rkbin-*/rk33/rk3399_miniloader_v1.06.bin >> idbloader.img
	cp $BUILD/rkbin-*/rk33/rk3399_loader_v1.08.106.bin .

	cp $BUILD/rkbin-*/rk33/rk3399_bl31_v1.00.elf .

	cat >trust.ini <<-EOF
	[VERSION]
	MAJOR=1
	MINOR=0
	[BL30_OPTION]
	SEC=0
	[BL31_OPTION]
	SEC=1
	PATH=rk3399_bl31_v1.00.elf
	ADDR=0x10000
	[BL32_OPTION]
	SEC=0
	[BL33_OPTION]
	SEC=0
	[OUTPUT]
	PATH=trust.img
	EOF

	$BUILD/rkbin-*/tools/trust_merger trust.ini

	rm rk3399_bl31_v1.00.elf

	cd -
}

## Pack image
pack_image_platform() {
    cd ${ROOT}

    echo "Image install type: $INSTALL_TYPE"
    if [ "$INSTALL_TYPE" == "EMMC" ]; then

		LOADER1_SIZE=8000
		RESERVED1_SIZE=128
		RESERVED2_SIZE=8192
		LOADER2_SIZE=8192
		ATF_SIZE=8192
		BOOT_SIZE=229376

		SYSTEM_START=0
		LOADER1_START=64
		RESERVED1_START=$(expr ${LOADER1_START} + ${LOADER1_SIZE})
		RESERVED2_START=$(expr ${RESERVED1_START} + ${RESERVED1_SIZE})
		LOADER2_START=$(expr ${RESERVED2_START} + ${RESERVED2_SIZE})
		ATF_START=$(expr ${LOADER2_START} + ${LOADER2_SIZE})
		BOOT_START=$(expr ${ATF_START} + ${ATF_SIZE})
		ROOTFS_START=$(expr ${BOOT_START} + ${BOOT_SIZE})

		IMG_ROOTFS_SIZE=$(stat -L --format="%s" ${BUILD_IMAGES}/rootfs.img)
		GPTIMG_MIN_SIZE=$(expr $IMG_ROOTFS_SIZE + \( ${LOADER1_SIZE} + ${RESERVED1_SIZE} + ${RESERVED2_SIZE} + ${LOADER2_SIZE} + ${ATF_SIZE} + ${BOOT_SIZE} + 35 \) \* 512)
		GPT_IMAGE_SIZE=$(expr $GPTIMG_MIN_SIZE \/ 1024 \/ 1024 + 2)

		dd if=/dev/zero of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} bs=1M count=0 seek=$GPT_IMAGE_SIZE

		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} mklabel gpt
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart loader1 ${LOADER1_START} $(expr ${RESERVED1_START} - 1)
		# parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart reserved1 ${RESERVED1_START} $(expr ${RESERVED2_START} - 1)
		# parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart reserved2 ${RESERVED2_START} $(expr ${LOADER2_START} - 1)
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart loader2 ${LOADER2_START} $(expr ${ATF_START} - 1)
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart trust ${ATF_START} $(expr ${BOOT_START} - 1)
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} unit s mkpart boot ${BOOT_START} $(expr ${ROOTFS_START} - 1)
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} set 4 boot on
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} -- unit s mkpart rootfs ${ROOTFS_START} -34s
		parted -s ${BUILD_IMAGES}/${IMAGE_FILE_NAME} set 5 boot on

		ROOT_UUID="B921B045-1DF0-41C3-AF44-4C6F280D3FAE"

		gdisk ${BUILD_IMAGES}/${IMAGE_FILE_NAME} <<-EOF
		x
		c
		5
		${ROOT_UUID}
		w
		y
		EOF

		# burn u-boot
		dd if=${UBOOT_DIR}/idbloader.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${LOADER1_START} conv=notrunc

		dd if=${UBOOT_DIR}/uboot.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${LOADER2_START} conv=notrunc
		dd if=${UBOOT_DIR}/trust.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} seek=${ATF_START} conv=notrunc

		# burn rootfs image
		dd if=${BUILD_IMAGES}/rootfs.img of=${BUILD_IMAGES}/${IMAGE_FILE_NAME} conv=notrunc,fsync seek=${ROOTFS_START}

		sync

	elif [ "$INSTALL_TYPE" == "SD-USB" ]; then

        IMAGE_LOOP_DEV="$(sudo losetup --show -f ${BUILD_IMAGES}/${IMAGE_FILE_NAME})"
        sudo partprobe "${IMAGE_LOOP_DEV}"

		sudo dd if=$UBOOT_SD_IMAGE of=${IMAGE_LOOP_DEV} conv=fsync bs=1 count=442
		sudo dd if=$UBOOT_SD_IMAGE of=${IMAGE_LOOP_DEV} conv=fsync bs=512 skip=1 seek=1

        sudo losetup -d "${IMAGE_LOOP_DEV}"
    else
        error_msg "Unsupported install type: '$INSTALL_TYPE'"
        return -1
    fi

    echo -e "\nIMAGE: $BUILD_IMAGES/$IMAGE_FILE_NAME"
}

